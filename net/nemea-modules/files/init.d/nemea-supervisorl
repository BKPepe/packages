#!/bin/sh /etc/rc.common
# NEMEA supervisor lightweight
# Copyright (C) 2019 CESNET

#
# How to use module:
# /etc/init.d/nemea-supervisorl start         - start all enabled module
# /etc/init.d/nemea-supervisorl start A B C   - stop all running module and start A, B and C module only
# /etc/init.d/nemea-supervisorl stop          - stop all module
# /etc/init.d/nemea-supervisorl stop A C      - stop A and C module only
# /etc/init.d/nemea-supervisorl enable        - start all enabled module on startup
# /etc/init.d/nemea-supervisorl disable       - disable all module on startup
# /etc/init.d/nemea-supervisorl restart       - stop and start all enabled module
# /etc/init.d/nemea-supervisorl reload        - stop and start all enabled module
# /etc/init.d/nemea-supervisorl status        - print status
# /etc/init.d/nemea-supervisorl status_json   - print status
# /etc/init.d/nemea-supervisorl status_jsonp  - print status
#

START=50
STOP=50

USE_PROCD=1

CONFIG_FILE=nemea-supervisor

. /lib/functions.sh

EXTRA_COMMANDS="$EXTRA_COMMANDS status status_json status_jsonp"
EXTRA_HELP="	status	Print list of modules and their status
	status_json	Print JSON object with list and status of modules
	status_jsonp	Print JSONP output, SIoTSupervisorlStatus() with list and status of modules"

PIDFILE_PREFIX=/var/run/nemea-
PIDFILE_SUFFIX=.pid

start_module()
{
   local MODULE="$1"
   local OPTION="$2"

   config_get BINPATH          "$MODULE"  path         ""
   config_get PARAMS        "$MODULE"  params         ""
   config_get CORE          "$MODULE"  core              ""
   config_get ENABLED       "$MODULE"  enabled           ""
   config_get RESPAWN            "$MODULE"  respawn           ""
   config_get RESPAWN_THRESHOLD  "$MODULE"  respawn_threshold ""
   config_get RESPAWN_TIMEOUT    "$MODULE"  respawn_timeout   ""
   config_get RESPAWN_RETRY      "$MODULE"  respawn_retry     ""
   config_get CORE               "$MODULE"  core              ""


   [ "${ENABLED:-0}" -eq 0 -a "$OPTION" == "only_enabled" ] && {
      logger -p daemon.notice -t "nemea-supervisorl" "skipping disabled NEMEA module $MODULE"
      return
   }

   logger -p daemon.notice -t "nemea-supervisorl" "starting NEMEA module $MODULE"

   procd_open_instance "$MODULE"
   procd_set_param command "$BINPATH" $PARAMS
   [ "${RESPAWN:-1}" -eq 1 ] && procd_set_param respawn "${RESPAWN_THRESHOLD:-3600}" "${RESPAWN_TIMEOUT:-5}" "${RESPAWN_RETRY:-5}"
   procd_set_param limits core="${CORE:-0}"
   procd_set_param stdout 1
   procd_set_param stderr 1
   procd_set_param pidfile "${PIDFILE_PREFIX}${MODULE}${PIDFILE_SUFFIX}"
   procd_close_instance
}

start_service()
{
   config_load "$CONFIG_FILE"

   if [ $# -eq 0 ]; then
      # start all (enabled) moduless
      config_foreach start_module module only_enabled
   else
      # start only specified module
      for i in "$@"; do
         start_module "$i"
      done
   fi
}

module_status()
{
   local config="$1"
   local custom="$2"
   config_get ENABLED       "$config"  enabled           ""
   config_get MODULEPATH    "$config"  path              ""
   config_get MODULEPARAMS  "$config"  params            ""

   echo -n "$config "
   [ "$ENABLED" = 1 ] && echo -n enabled || echo -n disabled
   pid="`cat "${PIDFILE_PREFIX}${config}${PIDFILE_SUFFIX}" 2>/dev/null`"
   if [ -z "$pid" ]; then
      # if pidfile does not exist, try to find the process with pgrep:
      pid="`pgrep -f "^${MODULEPATH} ${MODULEPARAMS}$" 2>/dev/null`"
   fi
   if [ -n "$pid" -a -d /proc/"$pid" ]; then
      echo " running"
   else
      echo " stopped"
   fi
}

status()
{
   config_load "$CONFIG_FILE"

   config_foreach module_status module
}

status_json()
{
   config_load "$CONFIG_FILE"
   if /etc/init.d/nemea-supervisorl enabled; then
      enabled=true
   else
      enabled=false
   fi
   echo -e "{\n  \"enabled\": $enabled,\n  \"modules\": {"

   first=true
   config_foreach module_status module | while read line; do
   if [ "$first" = false ]; then
      echo ","
   else
      first=false
   fi
   echo "$line" | sed 's/enabled/"enabled": true,/;
s/disabled/"enabled": false,/;
s/running/"running": true/;
s/stopped/"running": false/;
s/^\([^ ]*\) \(.*\)/    "\1": {\2}/;' | tr -d '\n'
   done

   echo -e "\n  }\n}"
}

status_jsonp()
{
   echo -n "SIoTSupervisorlStatus("
   status_json
   echo ");"
}

